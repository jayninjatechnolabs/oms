@startuml
class com.example.oms.controller.OrderController {
- OrderService orderService
- ProductService productService
- CustomerService customerService
+ ResponseEntity<String> createOrder(OrderRequest)
+ ResponseEntity<Order> getOrder(String)
}


class com.example.oms.controller.CustomerController {
- CustomerService customerService
+ ResponseEntity<Customer> createCustomer(CustomerRequest)
+ ResponseEntity<List<Customer>> getAllCustomers()
}


interface com.example.oms.service.CustomerService {
~ Customer createAndSaveCustomer(CustomerRequest)
~ List<Customer> getAllCustomers()
~ Customer getById(String)
~ Customer save(Customer)
}

class com.example.oms.entity.Product {
- String productId
- String name
- double basePrice
}

class com.example.oms.OmsApplication {
+ {static} void main(String[])
}

interface com.example.oms.repository.CustomerRepository {
}
interface com.example.oms.service.OrderItemService {
~ List<OrderItem> saveAll(List<OrderItem>)
}

class com.example.oms.service.impl.NotificationServiceImpl {
+ void sendConfirmation(Order)
}

interface com.example.oms.strategy.PricingStrategy {
~ double applyDiscount(Order)
~ boolean isApplicable(Order)
}

class com.example.oms.strategy.VolumeDiscountStrategy {
- {static} double VOLUME_DISCOUNT_RATE
- {static} int VOLUME_THRESHOLD
+ double applyDiscount(Order)
+ boolean isApplicable(Order)
}


class com.example.oms.dto.CustomerRequest {
- String name
- Long accountNumber
- String bankName
}

interface com.example.oms.repository.OrderItemRepository {
}
interface com.example.oms.service.OrderService {
~ Order createOrder(List<OrderItem>,Customer)
~ Order getById(String)
}

class com.example.oms.dto.ItemRequest {
- String productId
- int quantity
}

interface com.example.oms.service.NotificationService {
~ void sendConfirmation(Order)
}

class com.example.oms.service.impl.OrderItemServiceImpl {
- OrderItemRepository orderItemRepository
+ List<OrderItem> saveAll(List<OrderItem>)
}


class com.example.oms.service.impl.ProductServiceImpl {
- ProductRepository productRepository
+ Product createProduct(ProductRequest)
+ List<Product> getAllProducts()
+ List<Product> getById(List<String>)
}


class com.example.oms.service.impl.PaymentServiceImpl {
+ boolean process(Order)
}

class com.example.oms.dto.OrderRequest {
- List<ItemRequest> items
- String customerId
+ List<String> getProductIds()
}


class com.example.oms.entity.Customer {
- String customerId
- String name
- int orderCount
- Long accountNumber
- String bankName
+ void incrementOrderCount()
}


interface com.example.oms.service.PaymentService {
~ boolean process(Order)
}

class com.example.oms.dto.ProductRequest {
- String name
- double basePrice
}

class com.example.oms.controller.ProductController {
- ProductService productService
+ ResponseEntity<Product> createProduct(ProductRequest)
+ ResponseEntity<List<Product>> getAllProducts()
}


interface com.example.oms.service.ProductService {
~ Product createProduct(ProductRequest)
~ List<Product> getAllProducts()
~ List<Product> getById(List<String>)
}

enum com.example.oms.dto.OrderStatus {
+  PENDING
+  CONFIRMED
+  CANCELLED
+  SHIPPED
+  DELIVERED
}

class com.example.oms.service.impl.OrderServiceImpl {
- OrderRepository orderRepository
- PricingContext pricingContext
- NotificationService notificationService
- PaymentService paymentService
- OrderItemService orderItemService
- CustomerService customerService
+ Order createOrder(List<OrderItem>,Customer)
+ Order getById(String)
}


class com.example.oms.strategy.LoyaltyDiscountStrategy {
- {static} double LOYALTY_DISCOUNT_RATE
- {static} int LOYALTY_THRESHOLD
+ double applyDiscount(Order)
+ boolean isApplicable(Order)
}


interface com.example.oms.repository.OrderRepository {
}
class com.example.oms.strategy.PricingContext {
- List<PricingStrategy> strategies
+ void addStrategy(PricingStrategy)
+ double calculateTotalDiscount(Order)
}


class com.example.oms.service.impl.CustomerServiceImpl {
- CustomerRepository customerRepository
+ Customer createAndSaveCustomer(CustomerRequest)
+ List<Customer> getAllCustomers()
+ Customer getById(String)
+ Customer save(Customer)
}


class com.example.oms.entity.OrderItem {
- String orderItemId
- Order order
- Product product
- int quantity
- double subtotal
}

interface com.example.oms.repository.ProductRepository {
}
class com.example.oms.strategy.SeasonalDiscountStrategy {
- {static} double SEASONAL_DISCOUNT_RATE
- Clock clock
+ double applyDiscount(Order)
+ boolean isApplicable(Order)
}


class com.example.oms.entity.Order {
- String orderId
- Customer customer
- LocalDateTime orderDate
- OrderStatus status
- double totalDiscount
- double totalPrice
- double totalPriceAfterDiscount
- List<OrderItem> items
+ double calculateTotalPrice()
+ void updateTotalPriceAndDiscount(double)
}




org.springframework.data.jpa.repository.JpaRepository <|-- com.example.oms.repository.CustomerRepository
com.example.oms.service.NotificationService <|.. com.example.oms.service.impl.NotificationServiceImpl
com.example.oms.strategy.PricingStrategy <|.. com.example.oms.strategy.VolumeDiscountStrategy
org.springframework.data.jpa.repository.JpaRepository <|-- com.example.oms.repository.OrderItemRepository
com.example.oms.service.OrderItemService <|.. com.example.oms.service.impl.OrderItemServiceImpl
com.example.oms.service.ProductService <|.. com.example.oms.service.impl.ProductServiceImpl
com.example.oms.service.PaymentService <|.. com.example.oms.service.impl.PaymentServiceImpl
com.example.oms.service.OrderService <|.. com.example.oms.service.impl.OrderServiceImpl
com.example.oms.strategy.PricingStrategy <|.. com.example.oms.strategy.LoyaltyDiscountStrategy
org.springframework.data.jpa.repository.JpaRepository <|-- com.example.oms.repository.OrderRepository
com.example.oms.service.CustomerService <|.. com.example.oms.service.impl.CustomerServiceImpl
org.springframework.data.jpa.repository.JpaRepository <|-- com.example.oms.repository.ProductRepository
com.example.oms.strategy.PricingStrategy <|.. com.example.oms.strategy.SeasonalDiscountStrategy
@enduml